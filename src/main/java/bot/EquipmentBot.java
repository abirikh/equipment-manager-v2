package bot;

import model.Equipment;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import qr.QrReader;
import repository.EquipmentRepository;
import repository.SQLiteEquipmentRepository;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EquipmentBot extends TelegramLongPollingBot {
    private final String botToken;
    private final String botUsername;
    private final EquipmentRepository repository;

    // --- –î–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    private enum BotState {
        NONE,
        WAITING_FOR_EQUIPMENT_FOR_DESC,
        WAITING_FOR_NEW_DESC,
        WAITING_FOR_EQUIPMENT_FOR_LOC,
        WAITING_FOR_NEW_LOC
    }

    private final Map<Long, BotState> userStates = new HashMap<>();
    private final Map<Long, Integer> tempEquipmentId = new HashMap<>();


    public EquipmentBot(String token, String username) {
        this.botToken = token;
        this.botUsername = username;
        this.repository = new SQLiteEquipmentRepository(); // ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText();


// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
            if (text.equals("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")) {
                sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:");
                userStates.put(chatId, BotState.WAITING_FOR_EQUIPMENT_FOR_DESC);
                return;
            }

            if (text.equals("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ")) {
                sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:");
                userStates.put(chatId, BotState.WAITING_FOR_EQUIPMENT_FOR_LOC);
                return;
            }

// --- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
            BotState state = userStates.getOrDefault(chatId, BotState.NONE);

            switch (state) {
                case WAITING_FOR_EQUIPMENT_FOR_DESC -> {
                    Equipment eq = findEquipmentByText(text);
                    if (eq == null) {
                        sendText(chatId, "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
                    } else {
                        tempEquipmentId.put(chatId, eq.getId());
                        sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:");
                        userStates.put(chatId, BotState.WAITING_FOR_NEW_DESC);
                    }
                    return;
                }

                case WAITING_FOR_NEW_DESC -> {
                    Integer id = tempEquipmentId.get(chatId);
                    if (id != null) {
                        repository.updateDescription(id, text);
                        sendText(chatId, "–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ");
                    }
                    userStates.put(chatId, BotState.NONE);
                    return;
                }

                case WAITING_FOR_EQUIPMENT_FOR_LOC -> {
                    Equipment eq = findEquipmentByText(text);
                    if (eq == null) {
                        sendText(chatId, "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
                    } else {
                        tempEquipmentId.put(chatId, eq.getId());
                        sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:");
                        userStates.put(chatId, BotState.WAITING_FOR_NEW_LOC);
                    }
                    return;
                }

                case WAITING_FOR_NEW_LOC -> {
                    Integer id = tempEquipmentId.get(chatId);
                    if (id != null) {
                        repository.updateLocation(id, text);
                        sendText(chatId, "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ");
                    }
                    userStates.put(chatId, BotState.NONE);
                    return;
                }
            }


            // --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ ---
            if (update.getMessage().hasPhoto()) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
                    String fileId = update.getMessage().getPhoto().get(update.getMessage().getPhoto().size() - 1).getFileId();
                    org.telegram.telegrambots.meta.api.objects.File file = execute(new GetFile(fileId));
                    java.io.File downloaded = downloadFile(file);

                    // –ß–∏—Ç–∞–µ–º QR
                    String qrText = qr.QrReader.readQr(downloaded.getAbsolutePath());

                    if (qrText != null) {


                        if (qrText.startsWith("ID:")) {
                            String idStr = qrText.split("\n")[0].replace("ID:", "").trim();
                            int id = Integer.parseInt(idStr);
                            sendEquipmentById(chatId, id);
                        }
                    } else {
                        sendText(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    sendText(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞");
                }
                return;
            }

            // --- –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
            String messageText = update.getMessage().getText().trim();
            if (messageText.equals("/start")) {
                sendKeyboard(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.\n" +
                        "–¢—ã –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∏–ª–∏ QR-–∫–æ–¥—É.\n" +
                        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:");
                return;
            }


            List<Equipment> found = repository.searchEquipment(messageText);
            if (found.isEmpty()) {
                sendText(chatId, "‚ùå –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: " + messageText);
            } else {
                StringBuilder response = new StringBuilder("‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:\n\n");
                for (Equipment eq : found) {
                    response.append("ID: ").append(eq.getId()).append("\n")
                            .append("–ù–∞–∑–≤–∞–Ω–∏–µ: ").append(eq.getName()).append("\n")
                            .append("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ").append(eq.getSerialNumber()).append("\n")
                            .append("–û–ø–∏—Å–∞–Ω–∏–µ: ").append(eq.getDescription()).append("\n")
                            .append("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ").append(eq.getLocation()).append("\n")
                            .append("--------------------\n");
                }
                sendText(chatId, response.toString());
            }
        }
    }


    private void sendEquipmentById(Long chatId, int id) {
        Equipment eq = repository.getAllEquipment().stream()
                .filter(e -> e.getId() == id)
                .findFirst()
                .orElse(null);

        if (eq != null) {
            String msg = "üì¶ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ #" + eq.getId() +
                    "\n–ù–∞–∑–≤–∞–Ω–∏–µ: " + eq.getName() +
                    "\n–°–µ—Ä–∏–π–Ω—ã–π: " + eq.getSerialNumber() +
                    "\n–û–ø–∏—Å–∞–Ω–∏–µ: " + eq.getDescription() +
                    "\n–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: " + eq.getLocation();
            sendText(chatId, msg);
        } else {
            sendText(chatId, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å ID " + id);
        }
    }

    private void sendText(Long chatId, String text) {
        SendMessage message = new SendMessage(String.valueOf(chatId), text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendKeyboard(Long chatId, String text) {
        SendMessage message = new SendMessage(String.valueOf(chatId), text);

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true); // –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–≥–æ–Ω—è—é—Ç—Å—è –ø–æ–¥ —ç–∫—Ä–∞–Ω
        keyboardMarkup.setOneTimeKeyboard(false); // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞—ë—Ç—Å—è

        // –†—è–¥—ã –∫–Ω–æ–ø–æ–∫
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"));
        row1.add(new KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"));

        keyboardMarkup.setKeyboard(List.of(row1, row2));

        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private Equipment findEquipmentByText(String text) {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ ID
        try {
            int id = Integer.parseInt(text);
            return repository.getAllEquipment().stream()
                    .filter(e -> e.getId() == id)
                    .findFirst()
                    .orElse(null);
        } catch (NumberFormatException ignored) {
            // –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ ‚Äî –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        }

        List<Equipment> found = repository.searchEquipment(text);
        if (!found.isEmpty()) {
            return found.get(0); // –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        }
        return null;
    }


}
