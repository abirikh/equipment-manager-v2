package bot;

import model.Equipment;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import repository.EquipmentRepository;
import repository.SQLiteEquipmentRepository;

import java.io.FileInputStream;
import java.io.InputStream;
import java.util.*;

public class EquipmentBot extends TelegramLongPollingBot {
    private final String botToken;
    private final String botUsername;
    private final EquipmentRepository repository;

    // --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    private enum BotState {
        NONE,
        WAITING_FOR_EQUIPMENT_FOR_DESC,
        WAITING_FOR_NEW_DESC,
        WAITING_FOR_EQUIPMENT_FOR_LOC,
        WAITING_FOR_NEW_LOC
    }

    private final Map<Long, BotState> userStates = new HashMap<>();
    private final Map<Long, Integer> tempEquipmentId = new HashMap<>();

    public EquipmentBot() {
        Properties props = new Properties();
        try (InputStream input = new FileInputStream("config.properties")) {
            props.load(input);
        } catch (Exception e) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.properties", e);
        }

        this.botToken = props.getProperty("BOT_TOKEN");
        this.botUsername = props.getProperty("BOT_USERNAME");
        this.repository = new SQLiteEquipmentRepository();
    }


    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage()) return;

        Long chatId = update.getMessage().getChatId();

        // --- –ï—Å–ª–∏ —Ñ–æ—Ç–æ (QR-–∫–æ–¥) ---
        if (update.getMessage().hasPhoto()) {
            handleQrInput(chatId, update);
            return;
        }

        // --- –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç ---
        String text = update.getMessage().getText().trim();
        if (text.equals("/start")) {
            sendKeyboard(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.\n" +
                    "–ú–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ QR-–∫–æ–¥—É.\n" +
                    "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.");
            return;
        }

        // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
        if (text.equals("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ")) {
            sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ ID, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:");
            userStates.put(chatId, BotState.WAITING_FOR_EQUIPMENT_FOR_DESC);
            return;
        }

        if (text.equals("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ")) {
            sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ ID, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:");
            userStates.put(chatId, BotState.WAITING_FOR_EQUIPMENT_FOR_LOC);
            return;
        }

        if (text.equals("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")) {
            List<Equipment> all = repository.getAllEquipment();
            if (all.isEmpty()) {
                sendText(chatId, "üì≠ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è");
            } else {
                StringBuilder sb = new StringBuilder("üìã –í—Å–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:\n\n");
                for (Equipment eq : all) {
                    sb.append(formatEquipment(eq)).append("\n--------------------\n");
                }
                sendText(chatId, sb.toString());
            }
            return;
        }

        // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        BotState state = userStates.getOrDefault(chatId, BotState.NONE);

        switch (state) {
            case WAITING_FOR_EQUIPMENT_FOR_DESC -> {
                Equipment eq = findEquipmentByText(text);
                if (eq == null) {
                    sendText(chatId, "‚ùå –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ QR.");
                } else {
                    tempEquipmentId.put(chatId, eq.getId());
                    sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ:");
                    userStates.put(chatId, BotState.WAITING_FOR_NEW_DESC);
                }
                return;
            }

            case WAITING_FOR_NEW_DESC -> {
                Integer id = tempEquipmentId.get(chatId);
                if (id != null) {
                    repository.updateDescription(id, text);
                    sendText(chatId, "‚úÖ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±–Ω–æ–≤–ª—ë–Ω");
                }
                userStates.put(chatId, BotState.NONE);
                return;
            }

            case WAITING_FOR_EQUIPMENT_FOR_LOC -> {
                Equipment eq = findEquipmentByText(text);
                if (eq == null) {
                    sendText(chatId, "‚ùå –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ QR.");
                } else {
                    tempEquipmentId.put(chatId, eq.getId());
                    sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:");
                    userStates.put(chatId, BotState.WAITING_FOR_NEW_LOC);
                }
                return;
            }

            case WAITING_FOR_NEW_LOC -> {
                Integer id = tempEquipmentId.get(chatId);
                if (id != null) {
                    repository.updateLocation(id, text);
                    sendText(chatId, "‚úÖ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
                }
                userStates.put(chatId, BotState.NONE);
                return;
            }
        }

        // --- –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É ---
        List<Equipment> found = repository.searchEquipment(text);
        if (found.isEmpty()) {
            sendText(chatId, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: " + text);
        } else {
            StringBuilder sb = new StringBuilder("‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:\n\n");
            for (Equipment eq : found) {
                sb.append(formatEquipment(eq)).append("\n--------------------\n");
            }
            sendText(chatId, sb.toString());
        }
    }

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ QR ---
    private void handleQrInput(Long chatId, Update update) {
        try {
            String fileId = update.getMessage().getPhoto().get(update.getMessage().getPhoto().size() - 1).getFileId();
            org.telegram.telegrambots.meta.api.objects.File file = execute(new GetFile(fileId));
            java.io.File downloaded = downloadFile(file);

            String qrText = qr.QrReader.readQr(downloaded.getAbsolutePath());
            if (qrText == null) {
                sendText(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR");
                return;
            }

            if (qrText.startsWith("ID:")) {
                int id = Integer.parseInt(qrText.split("\n")[0].replace("ID:", "").trim());
                Equipment eq = repository.getAllEquipment().stream()
                        .filter(e -> e.getId() == id)
                        .findFirst()
                        .orElse(null);

                BotState state = userStates.getOrDefault(chatId, BotState.NONE);
                if (state == BotState.WAITING_FOR_EQUIPMENT_FOR_DESC) {
                    if (eq != null) {
                        tempEquipmentId.put(chatId, eq.getId());
                        sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ:");
                        userStates.put(chatId, BotState.WAITING_FOR_NEW_DESC);
                    } else {
                        sendText(chatId, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º QR");
                    }
                } else if (state == BotState.WAITING_FOR_EQUIPMENT_FOR_LOC) {
                    if (eq != null) {
                        tempEquipmentId.put(chatId, eq.getId());
                        sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:");
                        userStates.put(chatId, BotState.WAITING_FOR_NEW_LOC);
                    } else {
                        sendText(chatId, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º QR");
                    }
                } else {
                    if (eq != null) {
                        sendText(chatId, "üì¶ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ QR:\n" + formatEquipment(eq));
                    } else {
                        sendText(chatId, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ QR");
                    }
                }
            } else {
                sendText(chatId, "‚ö† QR –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è");
            }
        } catch (Exception e) {
            e.printStackTrace();
            sendText(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR");
        }
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---
    private String formatEquipment(Equipment eq) {
        return "ID: " + eq.getId() +
                "\n–ù–∞–∑–≤–∞–Ω–∏–µ: " + eq.getName() +
                "\n–°–µ—Ä–∏–π–Ω—ã–π: " + eq.getSerialNumber() +
                "\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: " + eq.getDescription() +
                "\n–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: " + eq.getLocation();
    }

    private Equipment findEquipmentByText(String text) {
        try {
            int id = Integer.parseInt(text);
            return repository.getAllEquipment().stream()
                    .filter(e -> e.getId() == id)
                    .findFirst()
                    .orElse(null);
        } catch (NumberFormatException ignored) {
        }

        List<Equipment> found = repository.searchEquipment(text);
        return found.isEmpty() ? null : found.get(0);
    }

    private void sendText(Long chatId, String text) {
        try {
            execute(new SendMessage(String.valueOf(chatId), text));
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendKeyboard(Long chatId, String text) {
        SendMessage message = new SendMessage(String.valueOf(chatId), text);

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"));
        row1.add(new KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"));

        keyboard.setKeyboard(List.of(row1, row2));
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
